Система предоставляет интерфейс для: 

    Управления списком задач (создание, чтение, обновление, удаление).
    Управления списком пользователей (создание, чтение, обновление, удаление).
    Назначения задач пользователям и изменения их статуса.
    Загрузки файлов-вложений к задачам.
    Просмотра задач, назначенных конкретному пользователю.
     

3. Функциональные требования 

3.1. Управление задачами (/tasks/) 

    FR-TASK-01 (Создание задачи): Пользователь может создать новую задачу, отправив POST-запрос на /tasks/ с телом, содержащим название (name), опциональное описание (description), опциональный ID пользователя (user_id) и статус (status, по умолчанию "created").
    FR-TASK-02 (Получение списка задач): Пользователь может получить список всех задач, отправив GET-запрос на /tasks/.
    FR-TASK-03 (Получение задачи по ID): Пользователь может получить детали конкретной задачи, отправив GET-запрос на /tasks/{task_id}.
    FR-TASK-04 (Обновление задачи): Пользователь может обновить данные задачи (название, описание, пользователя, статус), отправив PUT-запрос на /tasks/{task_id}.
    FR-TASK-05 (Удаление задачи): Пользователь может удалить задачу, отправив DELETE-запрос на /tasks/{task_id}.
     

3.2. Управление пользователями (/users/) 

    FR-USER-01 (Создание пользователя): Пользователь может создать новую учетную запись, отправив POST-запрос на /users/ с телом, содержащим имя пользователя (username) и email (email).
    FR-USER-02 (Получение списка пользователей): Пользователь может получить список всех пользователей, отправив GET-запрос на /users/.
    FR-USER-03 (Получение пользователя по ID): Пользователь может получить детали конкретного пользователя, отправив GET-запрос на /users/{user_id}.
    FR-USER-04 (Обновление пользователя): Пользователь может обновить данные пользователя (имя, email), отправив PUT-запрос на /users/{user_id}.
    FR-USER-05 (Удаление пользователя): Пользователь может удалить учетную запись пользователя, отправив DELETE-запрос на /users/{user_id}.
    FR-USER-06 (Получение задач пользователя): Пользователь может получить список всех задач, назначенных конкретному пользователю, отправив GET-запрос на /users/{user_id}/tasks.
     

3.3. Дополнительные операции с задачами 

    FR-ASSIGN-01 (Назначение задачи): Пользователь может назначить задачу конкретному пользователю и/или изменить ее статус, отправив POST-запрос на /tasks/assign-task/{task_id} с телом, содержащим user_id и опциональный status (по умолчанию "assigned").
    FR-ATTACH-01 (Загрузка вложения): Пользователь может загрузить файл-вложение к задаче, отправив POST-запрос на /tasks/{task_id}/attachment с файлом в формате multipart/form-data.
     

3.4. Корневой эндпоинт 

    FR-ROOT-01 (Проверка работоспособности): Пользователь может отправить GET-запрос на / для проверки, что API работает.
     

4. Структура данных 

    4.1. Сущность "Задача" (Task):
        id (string, обязательное): Уникальный идентификатор задачи.
        name (string, обязательное): Название задачи.
        description (string, опциональное): Описание задачи.
        status (string, обязательное): Статус задачи. Возможные значения: created, assigned, done.
        user_id (string, опциональное): ID пользователя, которому назначена задача.
        created_at (string/date-time, опциональное): Дата и время создания задачи.
        attachments (object, опциональное): Информация о прикрепленных файлах.
         
     

    4.2. Сущность "Пользователь" (User):
        id (string, обязательное): Уникальный идентификатор пользователя.
        username (string, обязательное): Имя пользователя.
        email (string, обязательное): Адрес электронной почты пользователя.
        created_at (string/date-time, опциональное): Дата и время создания учетной записи.
         
     

5. Обработка ошибок 

    API должен возвращать стандартные HTTP-коды состояния:
        200 OK / 201 Created: Успешное выполнение запроса.
        404 Not Found: Запрашиваемый ресурс (задача или пользователь) не найден.
        422 Unprocessable Entity: Ошибка валидации входных данных. Тело ответа должно содержать детали ошибки в формате HTTPValidationError.
         
    Для ошибки 404 должен возвращаться объект ErrorResponse с полем detail, содержащим описание ошибки.
     